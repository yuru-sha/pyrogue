あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

# 技術スタック

## コア技術
- Python: ^3.12
- TCOD: ^16.2.3
- NumPy: ^1.26.3

## 開発ツール
- Poetry: ^2.0.0
- pytest: ^8.0.0
- black: ^24.0.0
- isort: ^5.13.2
- mypy: ^1.14.0

---

# パッケージ管理
## 重要な制約事項
- パッケージ管理は `pyproject.toml` で一元管理
- 依存関係は Poetry を使用して管理
- これらのファイルは変更禁止（変更が必要な場合は承認が必要）：
  - pyproject.toml  - プロジェクト設定の中核
  - poetry.lock    - 依存関係の厳密なバージョン管理

## 実装規則
- パッケージのバージョンは pyproject.toml でのみ定義
- 型ヒントは必須（mypy による静的型チェック）
- 環境変数の利用は python-dotenv 経由のみ許可

---

# プロジェクト構成

以下のディレクトリ構造に従って実装を行ってください：

```
pyrogue/
├── src/
│   └── pyrogue/
│       ├── core/                     # ゲームコアロジック
│       │   ├── engine.py             # メインゲームエンジン
│       │   └── game_states.py        # ゲーム状態管理
│       ├── entities/                 # ゲーム内エンティティ
│       │   ├── entity.py             # 基本エンティティクラス
│       │   ├── actors/               # プレイヤー、NPCなど
│       │   └── items/                # アイテム関連
│       ├── map/                      # マップ生成・管理
│       │   ├── dungeon.py            # ダンジョン生成
│       │   └── tile.py              # タイル定義
│       ├── ui/                       # ユーザーインターフェース
│       │   ├── screens/              # 各種画面
│       │   └── elements/             # UI要素
│       ├── utils/                    # ユーティリティ
│       │   ├── colors.py             # 色定義
│       │   └── logger.py             # ログ機能
│       └── main.py                   # エントリーポイント
├── tests/                           # テストコード
├── data/                            # ゲームデータ
│   ├── assets/                      # アセット
│   └── logs/                        # ログファイル
├── docs/                            # ドキュメント
├── pyproject.toml                   # プロジェクト設定
└── README.md                        # プロジェクト説明
```

### 配置ルール
- ゲームロジック → `src/pyrogue/core/`
- エンティティ定義 → `src/pyrogue/entities/`
- マップ関連 → `src/pyrogue/map/`
- UI関連 → `src/pyrogue/ui/`
- 共通処理 → `src/pyrogue/utils/`


# ローグライクゲーム開発ガイドライン

## 1. ゲーム設計の原則

### 1.1 ローグライクの基本要素
- 手続き的生成によるダンジョン
- ターンベースの戦闘システム
- パーマデス（永続的な死）
- 探索要素の重視
- すべてのアイテムは識別済み状態
- モンスターはA-Zの英大文字で表現

### 1.2 ゲームバランス
- 難易度は適度に高く設定
- プレイヤーの選択が意味を持つ設計
- リスクと報酬のバランス
- 戦略的な深さの確保
- プレイヤーレベルは21を上限とする
- 成長カーブはオリジナルRogueに準拠

### 1.3 クリア条件
- 最終目標: イェンダーの魔除けを持って地上に帰還
  - 地下26階でイェンダーの魔除けを入手
  - イェンダーの魔除けを所持した状態で地下1階に到達
  - 地下1階の上り階段（地上への出口）は魔除け所持時のみ出現
  - イェンダーの魔除けの特徴
    - ゲーム内で1個しか生成されない
    - 破壊されることはない
    - モンスターに盗まれることはない
    - ドロップした場合は回収が必要
- ゲームオーバー条件
  - プレイヤーキャラクターの死亡（HPが0以下）
  - ゲーム終了（プレイヤーによる終了）

### 1.4 特別な部屋の生成
- 5階ごとに1つの特別な部屋を生成
- 出現確率は一律10%
- 部屋のサイズは5x5を上限
- 特別な部屋の種類
  - 宝物庫
    - 大量のゴールド（100-250の間でランダム）
    - 珍しい武器や防具
    - 貴重な指輪
    - 各種アイテム
    - 5x5を満たすようにアイテムを配置
  - 武器庫
    - 珍しい武器
    - 高性能な防具
    - 5x5を満たすようにアイテムを配置
  - 食料庫
    - 大量の食料
    - 5x5を満たすように食料を配置
  - 魔物のねぐら
    - 強力なモンスターが複数出現
    - 経験値とアイテムの報酬
    - 5x5を満たすようにモンスターを配置
  - 実験室
    - ランダムな薬
    - 5x5を満たすように薬を配置
  - 図書室
    - ランダムな巻物
    - 5x5を満たすように巻物を配置
- 特別な部屋の特徴
  - 隠し扉の先に配置
  - 隠し扉の前での特別メッセージ
    - "壁の隙間から明かりが差している"
    - "隙間風が吹いている"
    - "隙間から笑い声が聞こえる"
  - 隠し扉の発見方法はオリジナルRogueに準拠

### 1.5 アイテム生成
- ゴールド
  - 通常の生成: 1-250の間でランダム
  - 特別な部屋: 100-250の間でランダム

### 1.5 操作方法
- 移動
  - viキー
    - h: 左
    - j: 下
    - k: 上
    - l: 右
    - y: 左上
    - u: 右上
    - b: 左下
    - n: 右下
  - カーソルキー
    - ←↑→↓: 対応する方向に移動
- インベントリ操作
  - オリジナルRogueに準拠
- アイテム使用
  - オリジナルRogueに準拠
- その他のコマンド
  - @Rogue2.Official に準拠

### 1.6 スコアシステム
- スコア計算
  - 所持金
  - 所持アイテム（ゴールドに換金）
    - アイテムの価値はオリジナルRogueに準拠
  - イェンダーの魔除け
    - 未所持の場合はスコアを2で割る
- ハイスコア記録
  - 記録タイミング
    - ゲームクリア時のみ記録
    - メニュー画面からハイスコアランキング画面に遷移可能
  - 記録内容
    - プレイ時間
    - スコア
    - 所持ゴールド
    - 所持アイテム一覧
    - 敵の討伐数
    - プレイヤーレベル
  - 記録方式
    - JSON形式で保存
    - TOP100まで記録
    - スコアが高い順にソート
  - 記録フォーマット
    ```json
    {
      "highscores": [
        {
          "score": 12500,
          "play_time": "2:30:45",
          "gold": 2500,
          "items": [
            {"name": "Long Sword", "value": 1000},
            {"name": "Chain Mail", "value": 800},
            // ... other items
          ],
          "kills": 150,
          "player_level": 18,
          "timestamp": "2024-03-20T15:30:45Z"
        },
        // ... other scores
      ]
    }
    ```

### 1.7 マップ生成ルール

#### 1.7.1 部屋の生成
- BSPツリーを使用して部屋を配置
- 部屋サイズ
  - 最小: 6x6
  - 最大: 10x10
- 部屋間の最小間隔: 3マス

#### 1.7.2 部屋の接続
- 各部屋は最大4つの扉を持つことができる
- 扉は必ず壁の中央（真ん中）に配置
- 1つの壁には0個か1個の扉のみ配置可能
- 扉は必ず壁にのみ配置可能（部屋の内部には配置不可）
- 扉と扉を直接接続（扉同士を通路で結ぶ）
- 通路は直線またはL字型
- 通路の交差ルール
  - 通路同士の交差は許可
  - 特別な部屋への通路との交差は禁止
  - 通路は部屋と交差してはならない

#### 1.7.3 扉の生成ルール
- 通常の部屋間の扉
  - 50%の確率で隠し扉
  - 50%の確率で通常の扉
- 行き止まりの扉
  - 75%の確率で隠し扉
  - 25%の確率で通常の扉
- 特別な部屋への扉
  - 100%通常の扉（隠し扉にはならない）

#### 1.7.4 階段の配置
- 上り階段と下り階段は必ず別の部屋に配置
- 階段は部屋の内部（壁と扉を除く）にのみ配置可能

### 1.8 ゲーム内テキスト
- すべてのゲーム内メッセージは英語で統一
  - プレイヤーへのメッセージ
  - アイテムの説明
  - モンスターの説明
  - エラーメッセージ
  - UI表示
  - ログメッセージ

## 2. 技術実装ガイドライン

### 2.1 Pythonのベストプラクティス
- PEP 8スタイルガイドの遵守
- Type Hintsの積極的な活用
- Docstringsの徹底（Google style）
- 例外処理の適切な実装
- List comprehensionの適切な使用
- Virtual Environment (Poetry)の使用
- 依存関係の管理（pyproject.toml）

### 2.2 TCODフレームワーク
- コンソール操作は Console クラスで一元管理
- マップ生成は TCODMap を活用
- FOV計算は compute_fov を使用
- 入力処理は Key クラスで管理
- 乱数生成は TCODRandom を使用
- パスファインディングは TCODPath を活用

### 2.3 パフォーマンス最適化
- データ構造の最適化
  - 適切なコレクションの選択（list, dict, set）
  - NumPyの活用（大規模な数値計算時）
- アルゴリズムの最適化
  - 計算量の削減
  - キャッシュの活用
  - ジェネレータの適切な使用
- メモリ管理
  - 循環参照の回避
  - 大きなオブジェクトの適切な解放
  - __slots__の活用

## 3. コード構造

### 3.3 設計パターン
- Component Pattern for entities
- State Pattern for game states
- Observer Pattern for events
- Factory Pattern for object creation
- Command Pattern for input handling

### 3.4 Pythonらしい実装
- データクラスの活用
- Type Hintsの使用
- Context Managersの活用
- ジェネレータの適切な使用
- 例外処理の適切な実装

## 4. 品質管理

### 4.1 テスト要件
- ユニットテスト必須
  - ゲームロジック
  - ダンジョン生成
  - 戦闘システム
- ベンチマークテスト
  - パフォーマンスクリティカルな部分
- 統合テスト
  - ゲームの状態遷移
  - セーブ/ロード機能

### 4.2 デバッグ機能
- デバッグモードの実装
- ログ出力の充実
- パフォーマンスモニタリング
- チートコマンドの実装

## 5. アセット管理

### 5.1 テキストベースの表現
- ASCII文字による表現
  - プレイヤー: '@'
  - モンスター: A-Z（英大文字）
    - 'B': コウモリ
    - 'D': ドラゴン
    - 'E': 目玉
    - 'F': ファンガス
    - 'G': ゴブリン
    - 'H': ホビット
    - 'I': インプ
    - 'J': ジェリー
    - 'K': コボルド
    - 'L': レプラコーン
    - 'M': ミミック
    - 'N': ニンフ
    - 'O': オーク
    - 'P': パーサー
    - 'Q': クエイカー
    - 'R': ラット
    - 'S': スネーク
    - 'T': トロル
    - 'U': アーチャー
    - 'V': ヴァンパイア
    - 'W': ワーム
    - 'X': ゾーン
    - 'Y': イェティ
    - 'Z': ゾンビ
  - アイテム: 記号
    - '%': 食料
    - ')': 武器
    - '[': 防具
    - '=': 指輪
    - '?': 巻物
    - '!': 薬
    - '$': 金
    - '&': イェンダーの魔除け
  - 地形
    - '#': 壁
    - '.': 床
    - '+': ドア（閉）
    - '/': ドア（開）
    - '#': 隠し扉（未発見）
    - '+': 隠し扉（発見後、閉）
    - '/': 隠し扉（発見後、開）
    - '>': 下り階段
    - '<': 上り階段（1階でイェンダーの魔除け所持時は勝利への階段）
    - '~': 水
    - '^': 溶岩
- 色による情報表現
  - プレイヤー: 白色
  - モンスター: 赤色（敵対）、黄色（中立）、緑色（友好）
  - アイテム: 白色（すべて識別済み）
  - 地形: グレー
  - ドア: 茶色
  - イェンダーの魔除け: 黄金色
  - 水: 青色
  - 溶岩: 赤色
- フォント要件
  - 等幅フォントの使用必須
  - 推奨フォント: JetBrains Mono, Source Code Pro
  - フォールバックフォント: Courier New
- アニメーション
  - 文字の点滅による表現
  - 色の変化による表現
  - シンプルな文字置換によるアニメーション

### 5.2 UI設計
- テキストベースのメニュー
- コマンドライン形式の入力
- ステータス表示は画面上部2行に固定
  - 1行目: Level, HP, 攻撃力, 防御力, 空腹度, 経験値, 所持金
  - 2行目: 武器, 防具, 指輪(左), 指輪(右)
- マップ表示は画面中央
- メッセージログは画面下部3行に固定
- ヘルプは'?'キーで表示
- インベントリは文字による選択

### 5.3 表示レイアウト
```
 Lv:12 HP:82/100 Atk:15 Def:12 Hunger:89% Exp:1250 Gold:2500
 Weap:Long Sword Armor:Chain Mail Ring(L):Power Ring(R):Protection
 #####.....           k
 #....+...          .@.
 ###...###           d
 #...#
 #.#.#
 You see a kobold (k) nearby.
 The dragon (d) breathes fire!
 Your stomach growls.
```

## 6. ドキュメント規約

### 6.1 コードコメント
- 全ての公開関数にDocstring(Google style)コメント
- 複雑なアルゴリズムには説明を付加
- TODO/FIXMEの積極的な使用
- ベンチマーク結果の記録

### 6.2 設計ドキュメント
- アーキテクチャ概要
- データフロー図
- 状態遷移図
- API仕様書

---

以上の内容を順守し、タスクを遂行してください。