# ローグライクゲーム開発ガイドライン

## 1. ゲーム設計の原則

### 1.1 ローグライクの基本要素
- 手続き的生成によるダンジョン
- ターンベースの戦闘システム
- パーマデス（永続的な死）
- 探索要素の重視
- すべてのアイテムは識別済み状態
- モンスターはA-Zの英大文字で表現

### 1.2 ゲームバランス
- 難易度は適度に高く設定
- プレイヤーの選択が意味を持つ設計
- リスクと報酬のバランス
- 戦略的な深さの確保
- プレイヤーレベルは21を上限とする
- 成長カーブはオリジナルRogueに準拠

### 1.3 クリア条件
- 最終目標: イェンダーの魔除けを持って地上に帰還
  - 地下26階でイェンダーの魔除けを入手
  - イェンダーの魔除けを所持した状態で地下1階に到達
  - 地下1階の上り階段（地上への出口）は魔除け所持時のみ出現
  - イェンダーの魔除けの特徴
    - ゲーム内で1個しか生成されない
    - 破壊されることはない
    - モンスターに盗まれることはない
    - ドロップした場合は回収が必要
- ゲームオーバー条件
  - プレイヤーキャラクターの死亡（HPが0以下）
  - ゲーム終了（プレイヤーによる終了）

### 1.4 特別な部屋の生成
- 5階ごとに1つの特別な部屋を生成
- 出現確率は一律10%
- 部屋のサイズは5x5を上限
- 特別な部屋の種類
  - 宝物庫
    - 大量のゴールド（100-250の間でランダム）
    - 珍しい武器や防具
    - 貴重な指輪
    - 各種アイテム
    - 5x5を満たすようにアイテムを配置
  - 武器庫
    - 珍しい武器
    - 高性能な防具
    - 5x5を満たすようにアイテムを配置
  - 食料庫
    - 大量の食料
    - 5x5を満たすように食料を配置
  - 魔物のねぐら
    - 強力なモンスターが複数出現
    - 経験値とアイテムの報酬
    - 5x5を満たすようにモンスターを配置
  - 実験室
    - ランダムな薬
    - 5x5を満たすように薬を配置
  - 図書室
    - ランダムな巻物
    - 5x5を満たすように巻物を配置
- 特別な部屋の特徴
  - 隠し扉の先に配置
  - 隠し扉の前での特別メッセージ
    - "壁の隙間から明かりが差している"
    - "隙間風が吹いている"
    - "隙間から笑い声が聞こえる"
  - 隠し扉の発見方法はオリジナルRogueに準拠

### 1.5 アイテム生成
- ゴールド
  - 通常の生成: 1-250の間でランダム
  - 特別な部屋: 100-250の間でランダム

### 1.5 操作方法
- 移動
  - viキー
    - h: 左
    - j: 下
    - k: 上
    - l: 右
    - y: 左上
    - u: 右上
    - b: 左下
    - n: 右下
  - カーソルキー
    - ←↑→↓: 対応する方向に移動
- インベントリ操作
  - オリジナルRogueに準拠
- アイテム使用
  - オリジナルRogueに準拠
- その他のコマンド
  - @Rogue2.Official に準拠

### 1.6 スコアシステム
- スコア計算
  - 所持金
  - 所持アイテム（ゴールドに換金）
    - アイテムの価値はオリジナルRogueに準拠
  - イェンダーの魔除け
    - 未所持の場合はスコアを2で割る
- ハイスコア記録
  - 記録タイミング
    - ゲームクリア時のみ記録
    - メニュー画面からハイスコアランキング画面に遷移可能
  - 記録内容
    - プレイ時間
    - スコア
    - 所持ゴールド
    - 所持アイテム一覧
    - 敵の討伐数
    - プレイヤーレベル
  - 記録方式
    - JSON形式で保存
    - TOP100まで記録
    - スコアが高い順にソート
  - 記録フォーマット
    ```json
    {
      "highscores": [
        {
          "score": 12500,
          "play_time": "2:30:45",
          "gold": 2500,
          "items": [
            {"name": "Long Sword", "value": 1000},
            {"name": "Chain Mail", "value": 800},
            // ... other items
          ],
          "kills": 150,
          "player_level": 18,
          "timestamp": "2024-03-20T15:30:45Z"
        },
        // ... other scores
      ]
    }
    ```

## 2. 技術実装ガイドライン

### 2.1 Pythonのベストプラクティス
- PEP 8スタイルガイドの遵守
- Type Hintsの積極的な活用
- Docstringsの徹底（Google style）
- 例外処理の適切な実装
- List comprehensionの適切な使用
- Virtual Environment (Poetry)の使用
- 依存関係の管理（pyproject.toml）

### 2.2 TCODフレームワーク
- コンソール操作は Console クラスで一元管理
- マップ生成は TCODMap を活用
- FOV計算は compute_fov を使用
- 入力処理は Key クラスで管理
- 乱数生成は TCODRandom を使用
- パスファインディングは TCODPath を活用

### 2.3 パフォーマンス最適化
- データ構造の最適化
  - 適切なコレクションの選択（list, dict, set）
  - NumPyの活用（大規模な数値計算時）
- アルゴリズムの最適化
  - 計算量の削減
  - キャッシュの活用
  - ジェネレータの適切な使用
- メモリ管理
  - 循環参照の回避
  - 大きなオブジェクトの適切な解放
  - __slots__の活用

## 3. コード構造

### 3.1 パッケージ構成
```
.
├── pyproject.toml          # Poetry設定
├── README.md              # プロジェクト説明
├── src/
│   └── pyrogue/          # メインパッケージ
│       ├── __init__.py
│       ├── main.py        # エントリーポイント
│       ├── core/          # コアシステム
│       │   ├── __init__.py
│       │   ├── engine.py  # ゲームエンジン
│       │   └── event.py   # イベント管理
│       ├── game/          # ゲームロジック
│       │   ├── __init__.py
│       │   ├── actions.py # アクション
│       │   ├── combat.py  # 戦闘システム
│       │   └── inventory.py # インベントリ
│       ├── map/           # マップ関連
│       │   ├── __init__.py
│       │   ├── dungeon.py # ダンジョン生成
│       │   └── tile.py    # タイル定義
│       ├── entity/        # エンティティ
│       │   ├── __init__.py
│       │   ├── actor.py   # アクター基底
│       │   ├── player.py  # プレイヤー
│       │   └── monsters.py # モンスター
│       ├── items/         # アイテム
│       │   ├── __init__.py
│       │   ├── base.py    # アイテム基底
│       │   ├── equipment.py # 装備品
│       │   └── food.py    # 食料
│       └── ui/            # UI関連
│           ├── __init__.py
│           ├── screen.py  # 画面管理
│           └── messages.py # メッセージ
├── tests/                 # テストコード
│   ├── __init__.py
│   ├── test_dungeon.py
│   ├── test_combat.py
│   └── test_items.py
└── resources/             # リソース
    └── config/           # 設定ファイル
```

### 3.2 Poetry設定
```toml
[tool.poetry]
name = "pyrogue"
version = "0.1.0"
description = "A roguelike game built with Python and TCOD"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "pyrogue", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
tcod = "^13.0.0"
numpy = "^1.21.0"
typing-extensions = "^4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
black = "^23.0.0"
isort = "^5.0.0"
mypy = "^1.0.0"
pylint = "^2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
game = "pyrogue.main:main"
```

### 3.3 設計パターン
- Component Pattern for entities
- State Pattern for game states
- Observer Pattern for events
- Factory Pattern for object creation
- Command Pattern for input handling

### 3.4 Pythonらしい実装
- データクラスの活用
- Type Hintsの使用
- Context Managersの活用
- ジェネレータの適切な使用
- 例外処理の適切な実装

## 4. 品質管理

### 4.1 テスト要件
- ユニットテスト必須
  - ゲームロジック
  - ダンジョン生成
  - 戦闘システム
- ベンチマークテスト
  - パフォーマンスクリティカルな部分
- 統合テスト
  - ゲームの状態遷移
  - セーブ/ロード機能

### 4.2 デバッグ機能
- デバッグモードの実装
- ログ出力の充実
- パフォーマンスモニタリング
- チートコマンドの実装

## 5. アセット管理

### 5.1 テキストベースの表現
- ASCII文字による表現
  - プレイヤー: '@'
  - モンスター: A-Z（英大文字）
    - 'B': コウモリ
    - 'D': ドラゴン
    - 'E': 目玉
    - 'F': ファンガス
    - 'G': ゴブリン
    - 'H': ホビット
    - 'I': インプ
    - 'J': ジェリー
    - 'K': コボルド
    - 'L': レプラコーン
    - 'M': ミミック
    - 'N': ニンフ
    - 'O': オーク
    - 'P': パーサー
    - 'Q': クエイカー
    - 'R': ラット
    - 'S': スネーク
    - 'T': トロル
    - 'U': アーチャー
    - 'V': ヴァンパイア
    - 'W': ワーム
    - 'X': ゾーン
    - 'Y': イェティ
    - 'Z': ゾンビ
  - アイテム: 記号
    - '%': 食料
    - ')': 武器
    - '[': 防具
    - '=': 指輪
    - '?': 巻物
    - '!': 薬
    - '$': 金
    - '&': イェンダーの魔除け
  - 地形
    - '#': 壁
    - '.': 床
    - '+': ドア（閉）
    - '/': ドア（開）
    - '#': 隠し扉（未発見）
    - '+': 隠し扉（発見後、閉）
    - '/': 隠し扉（発見後、開）
    - '>': 下り階段
    - '<': 上り階段（1階でイェンダーの魔除け所持時は勝利への階段）
    - '~': 水
    - '^': 溶岩
- 色による情報表現
  - プレイヤー: 白色
  - モンスター: 赤色（敵対）、黄色（中立）、緑色（友好）
  - アイテム: 白色（すべて識別済み）
  - 地形: グレー
  - ドア: 茶色
  - イェンダーの魔除け: 黄金色
  - 水: 青色
  - 溶岩: 赤色
- フォント要件
  - 等幅フォントの使用必須
  - 推奨フォント: JetBrains Mono, Source Code Pro
  - フォールバックフォント: Courier New
- アニメーション
  - 文字の点滅による表現
  - 色の変化による表現
  - シンプルな文字置換によるアニメーション

### 5.2 UI設計
- テキストベースのメニュー
- コマンドライン形式の入力
- ステータス表示は画面上部2行に固定
  - 1行目: Level, HP, 攻撃力, 防御力, 空腹度, 経験値, 所持金
  - 2行目: 武器, 防具, 指輪(左), 指輪(右)
- マップ表示は画面中央
- メッセージログは画面下部3行に固定
- ヘルプは'?'キーで表示
- インベントリは文字による選択

### 5.3 表示レイアウト
```
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 Lv:12 HP:82/100 Atk:15 Def:12 Hunger:89% Exp:1250 Gold:2500
 Weap:Long Sword Armor:Chain Mail Ring(L):Power Ring(R):Protection
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 #####.....           k
 #....+...          .@.
 ###...###           d
 #...#
 #.#.#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
You see a kobold (k) nearby.
The dragon (d) breathes fire!
Your stomach growls.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
```

## 6. ドキュメント規約

### 6.1 コードコメント
- 全ての公開関数にDocstring(Google style)コメント
- 複雑なアルゴリズムには説明を付加
- TODO/FIXMEの積極的な使用
- ベンチマーク結果の記録

### 6.2 設計ドキュメント
- アーキテクチャ概要
- データフロー図
- 状態遷移図
- API仕様書
